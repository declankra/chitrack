/**
 * User Types
 * Centralized type definitions for user data, Supabase database schemas, and related interfaces
 */
import type { UUID } from 'crypto'; // Or import from your UUID library if needed

/**
 * Structure for stop information stored in JSONB columns
 */
export interface StopInfo {
  stop_id: string;
  route_id: string;
  direction_id: string;
  stop_name: string;
}

/**
 * Core user data interface used throughout the application (uses camelCase)
 */
export interface UserData {
  userId?: UUID; // From Supabase, read-only
  deviceId: string; // The primary identifier used by the app
  userName?: string | null;
  homeStop?: StopInfo | null; // Can be null if not set
  favoriteStops?: StopInfo[] | null; // Can be null or empty array
  paidUserStatus: boolean;
  firstOpenDate?: Date | null; // From Supabase, read-only
  createdAt?: Date | null; // From Supabase, read-only
  updatedAt?: Date | null; // From Supabase, read-only
}

/**
 * Supabase user data interface matching the 'chitrack_users' table schema (uses snake_case)
 * This type is mainly for fetching/parsing data directly from Supabase responses.
 */
export interface SupabaseChitrackUser {
  user_id: UUID;
  device_id: string;
  user_name?: string | null;
  home_stop?: StopInfo | null; // Directly maps to JSONB
  favorite_stops?: StopInfo[] | null; // Directly maps to JSONB array
  first_open_date?: string | null; // Timestamptz comes as string
  paid_user_status: boolean;
  created_at: string; // Timestamptz comes as string
  updated_at: string; // Timestamptz comes as string
  [key: string]: unknown;  // Allow for additional properties if needed
}

/**
 * Interface for user feedback data matching the 'chitrack_feedback' table (uses snake_case)
 */
export interface SupabaseChitrackFeedback {
  id?: UUID; // Optional as it's generated by DB
  device_id: string; // Foreign key
  rating?: number | null; // CHECK (1-5)
  feedback?: string | null;
  paid_user_status_at_submission: boolean;
  created_at?: string; // Timestamptz comes as string
  [key: string]: unknown;  // Allow for additional properties if needed
}

/**
 * Interface for arrivals data from the CTA API
 */
export interface ArrivalInfo {
  stopId: string;
  stationName: string;
  route: string;
  arrivals: Array<{
    arrT: string;
    destNm: string;
    rt: string;  // Will be cast to RouteColor when used
    isApp: string;
    isDly: string;
  }>;
}

/**
 * Type for favorite stops arrivals mapping
 */
export type FavoriteStopsArrivalsType = Record<string, ArrivalInfo>; 